name: Unzip, Build, and Commit (same branch)

on:
  push:
    branches: [ dev, main ]
    paths:
      - "**.zip"
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to operate on (default: current)"
        required: false
        default: ""
      zip_file:
        description: "Path to ZIP in repo (e.g. portfolio_updated.zip). Leave blank to use newest."
        required: false
        default: ""
      force_commit:
        description: "Force a commit even if no diff (yes/no)"
        required: false
        default: "yes"

permissions:
  contents: write

env:
  TARGET_BRANCH: ${{ github.event.inputs.branch != '' && github.event.inputs.branch || github.ref_name }}

jobs:
  unzip-build-commit:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout target branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.TARGET_BRANCH }}

      - name: Resolve ZIP to process
        id: resolve
        shell: bash
        run: |
          set -e
          INPUT="${{ github.event.inputs.zip_file }}"
          if [ -n "$INPUT" ]; then
            test -f "$INPUT" || { echo "ZIP not found: $INPUT"; exit 1; }
            echo "zip_path=$INPUT" >> $GITHUB_OUTPUT
            exit 0
          fi

          # If this run was triggered by a push, grab the changed ZIP
          CHANGED=$(git diff-tree --no-commit-id --name-only -r "$GITHUB_SHA" | grep -E '\.zip$' || true)
          if [ -n "$CHANGED" ]; then
            echo "zip_path=$(echo "$CHANGED" | head -n1)" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Otherwise pick the newest ZIP in the branch
          LATEST=$(git ls-tree -r --name-only HEAD | grep -E '\.zip$' | xargs -r ls -t 2>/dev/null | head -n1 || true)
          if [ -n "$LATEST" ]; then
            echo "zip_path=$LATEST" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "zip_path=" >> $GITHUB_OUTPUT
          echo "No ZIP found in repo."
          exit 0

      - name: Bail if no zip found
        if: steps.resolve.outputs.zip_path == ''
        run: echo "Nothing to do."

      - name: Unzip to temp & flatten
        if: steps.resolve.outputs.zip_path != ''
        id: unzip
        shell: bash
        run: |
          set -e
          ZIP="${{ steps.resolve.outputs.zip_path }}"
          echo "Processing ZIP: $ZIP"

          rm -rf _unzipped _unzipped_flat
          mkdir -p _unzipped
          unzip -q "$ZIP" -d _unzipped

          # Ignore macOS junk
          rm -rf _unzipped/__MACOSX || true

          # Flatten if single top-level folder
          DIRS=$(find _unzipped -mindepth 1 -maxdepth 1 -type d | wc -l)
          FILES=$(find _unzipped -mindepth 1 -maxdepth 1 -type f | wc -l)
          if [ "$DIRS" -eq 1 ] && [ "$FILES" -eq 0 ]; then
            INNER=$(find _unzipped -mindepth 1 -maxdepth 1 -type d)
            mv "$INNER" _unzipped_flat
            SRC="_unzipped_flat"
          else
            SRC="_unzipped"
          fi

          echo "src_dir=$SRC" >> $GITHUB_OUTPUT
          echo "Flattened source listing:"
          ls -la "$SRC" || true

      - name: Sync into repo (overwrite-safe)
        if: steps.unzip.outputs.src_dir != ''
        shell: bash
        run: |
          set -e
          SRC="${{ steps.unzip.outputs.src_dir }}"
          echo "Syncing from: $SRC"

          set +e
          rsync -a --delete \
            --exclude='.git/' \
            --exclude='.github/' \
            --exclude='*.zip' \
            "$SRC"/ ./ 
          code=$?
          set -e

          # Ignore "vanished files" (24), fail otherwise
          if [ "$code" -ne 0 ] && [ "$code" -ne 24 ]; then
            echo "rsync failed with code $code"
            exit "$code"
          fi

          rm -rf _unzipped _unzipped_flat || true

      - name: Write stamp from ZIP hash (ensures a commit)
        id: stamp
        shell: bash
        run: |
          set -e
          if [ "${{ github.event.inputs.force_commit }}" = "yes" ] || [ -z "${{ github.event.inputs.force_commit }}" ]; then
            HASH=$(sha256sum "${{ steps.resolve.outputs.zip_path }}" | cut -d' ' -f1)
            echo "$HASH" > .zip-hash
            echo "zip_sha256=$HASH" >> $GITHUB_OUTPUT
          else
            echo "zip_sha256=" >> $GITHUB_OUTPUT
          fi

      - name: Show changes (debug)
        run: |
          echo "---- git status ----"; git status
          echo "---- diff summary ----"; git --no-pager diff --stat || true

      # Only set up Node if we actually need to build
      - name: Setup Node (package.json or tailwind.config.js present)
        if: hashFiles('package.json') != '' || hashFiles('tailwind.config.js') != ''
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install deps (no lockfile assumptions)
        if: hashFiles('package.json') != ''
        run: npm install --no-audit --fund=false

      - name: Build assets
        if: hashFiles('package.json') != '' || hashFiles('tailwind.config.js') != ''
        shell: bash
        run: |
          if [ -f package.json ] && npm run | grep -qE '^ *build:css'; then
            npm run build:css
          elif [ -f package.json ] && npm run | grep -qE '^ *build'; then
            npm run build
          elif [ -f tailwind.config.js ]; then
            npx tailwindcss -i ./css/tailwind.css -o ./css/main.css --minify
          else
            echo "No build step required."
          fi

      - name: Commit changes back to same branch
        shell: bash
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Stage everything except zips
          git add -A
          git reset -- $(git ls-files -- '*.zip') 2>/dev/null || true

          echo "---- staged diff summary ----"
          git --no-pager diff --cached --stat || true

          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          MSG="Unzip+sync+build from ${{ steps.resolve.outputs.zip_path }} [skip ci]"
          if [ -n "${{ steps.stamp.outputs.zip_sha256 }}" ]; then
            MSG="$MSG (zip:${{ steps.stamp.outputs.zip_sha256 }})"
          fi

          git commit -m "$MSG"
          git push origin "${{ env.TARGET_BRANCH }}"
