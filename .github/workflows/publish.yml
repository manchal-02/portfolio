name: Unzip, Build, and Commit (dev)

on:
  push:
    branches: [ dev ]
    paths:
      - "**.zip"                 # auto-run when a zip changes on dev
  workflow_dispatch:            # manual run support
    inputs:
      zip_file:
        description: 'Path to the ZIP file in the repo (e.g., site.zip). If empty, use newest ZIP.'
        required: false
        default: ''

permissions:
  contents: write

jobs:
  unzip-build-commit:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve ZIP to process
        id: resolve
        shell: bash
        run: |
          set -e
          INPUT="${{ github.event.inputs.zip_file }}"
          if [ -n "$INPUT" ]; then
            # From manual trigger with input
            if [ -f "$INPUT" ]; then
              echo "zip_path=$INPUT" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "❌ Provided zip_file not found: $INPUT"
              exit 1
            fi
          fi

          # From push: prefer changed zip in this commit
          CHANGED=$(git diff-tree --no-commit-id --name-only -r "$GITHUB_SHA" | grep -E '\.zip$' || true)
          if [ -n "$CHANGED" ]; then
            # Take the first changed ZIP
            ZIP_PATH=$(echo "$CHANGED" | head -n1)
            echo "zip_path=$ZIP_PATH" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Manual trigger *without* input: pick newest ZIP in repo
          LATEST=$(git ls-tree -r --name-only HEAD | grep -E '\.zip$' | xargs -r ls -t 2>/dev/null | head -n1 || true)
          if [ -n "$LATEST" ]; then
            echo "zip_path=$LATEST" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "No ZIP file found in repo."
          echo "zip_path=" >> $GITHUB_OUTPUT

      - name: Bail if no zip found
        if: steps.resolve.outputs.zip_path == ''
        run: |
          echo "Nothing to do (no ZIP). Exiting."
          exit 0

      - name: Unzip to temp and flatten
        id: unzip
        shell: bash
        run: |
          set -e
          ZIP="${{ steps.resolve.outputs.zip_path }}"
          echo "Processing ZIP: $ZIP"
          rm -rf _unzipped
          mkdir -p _unzipped
          unzip -q "$ZIP" -d _unzipped

          echo "After unzip:"
          ls -la _unzipped

          # If it contains a single top-level folder, flatten it
          DIRS=$(find _unzipped -mindepth 1 -maxdepth 1 -type d | wc -l)
          FILES=$(find _unzipped -mindepth 1 -maxdepth 1 -type f | wc -l)
          if [ "$DIRS" -eq 1 ] && [ "$FILES" -eq 0 ]; then
            INNER=$(find _unzipped -mindepth 1 -maxdepth 1 -type d)
            echo "Flattening inner dir: $INNER"
            mv "$INNER" _unzipped_flat
            SRC="_unzipped_flat"
          else
            SRC="_unzipped"
          fi
          echo "src_dir=$SRC" >> $GITHUB_OUTPUT

      - name: Sync extracted content into repo root (overwrite-safe)
        shell: bash
        run: |
          set -e
          SRC="${{ steps.unzip.outputs.src_dir }}"
          echo "Syncing from: $SRC"

          set +e
          rsync -a --delete \
            --exclude='.git/' \
            --exclude='.github/' \
            --exclude='*.zip' \
            "$SRC"/ ./ 
          code=$?
          set -e

          # Ignore "vanished files" (24), fail on anything else
          if [ "$code" -ne 0 ] && [ "$code" -ne 24 ]; then
            echo "rsync failed with code $code"
            exit "$code"
          fi

          # Clean temp after sync
          rm -rf _unzipped _unzipped_flat || true

      - name: Setup Node (only if package.json exists)
        if: hashFiles('package.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps (tolerant)
        if: hashFiles('package.json') != ''
        shell: bash
        run: |
          npm ci || npm install

      - name: Build assets (supports build:css or build)
        if: hashFiles('package.json') != ''
        shell: bash
        run: |
          if npm run | grep -qE '^ *build:css'; then
            npm run build:css
          elif npm run | grep -qE '^ *build'; then
            npm run build
          else
            echo "No build script found; skipping."
          fi

      - name: Commit back to dev
        shell: bash
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Don’t commit the zip itself again
          git add -A
          git reset -- $(git ls-files -- '*.zip') 2>/dev/null || true

          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git commit -m "Unzip + sync + build from ${{ steps.resolve.outputs.zip_path }} [skip ci]"
          git push origin dev
